@page "/historicalTemperature"


@using WeatherApp.Data
@using WeatherApp.Common.Models
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@using WeatherDataAccessLibrary.Interfaces
@using Chartjs


@inject ISqlQueries SqlQueries

<style>
    div.line_chart{
        width: 1000px;
        margin: 0 auto;
    }
    div.dateInput{
        text-align: center;
    }
    table.table{
        width: 75% ;
        text-align: center;
        margin: 0 auto;
    }
    h2.daily{
        margin: 3% 0 3% 12%;
        
    }
</style>

<h1>Historical weather forecast in Bratislava</h1>

<h3>Get historical forecast</h3>
<EditForm Model="@_dateFilter"  OnValidSubmit="@DisplayHistoricalWeatherData">
    <div class="dateInput">
        <label>From date</label>
        <InputDate id="fromDate" @bind-Value="_dateFilter.FromDate" ></InputDate>
        <button type="submit" class="btn btn-success" style="margin-left: 15px">Display</button>
    </div>
</EditForm>

@if (_historicalData == null)
{
    <p><em>Please select date of historical forecast.</em></p>
}
else
{
    <h3>Historical Weather Data</h3>
    <div class="line_chart"> 
        <ChartJsLineChart @ref="_lineChartJs" Config="@configTemp" Width="50" Height="20" />
    </div>
    <div class="line_chart"> 
        <ChartJsLineChart @ref="_lineChartJs" Config="@configHumidity" Width="50" Height="20" />
    </div>
    <div class="line_chart"> 
        <ChartJsLineChart @ref="_lineChartJs" Config="@configPressure" Width="50" Height="20" />
    </div>
    
    <h2 class="daily">Daily observations</h2>
    
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temperature</th>
            <th>Feels like</th>
            <th>Pressure</th>
            <th>Humidity</th>
            <th>Icon</th>
            <th>Condition</th>
            <th>Description</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var data in _historicalData)
        {
            <tr>
                <td style="vertical-align: middle" >@data.Date.ToString("HH:mm")</td>
                <td style="vertical-align: middle">@Math.Ceiling(data.Temp)&deg</td>
                <td style="vertical-align: middle">@Math.Ceiling(data.Feels_Like)&deg</td>
                <td style="vertical-align: middle">@data.Pressure (mmHg)</td>
                <td style="vertical-align: middle">@data.Humidity%</td>
                <td style="vertical-align: middle">
                    <img src="http://openweathermap.org/img/wn/@data.Icon.Trim()@@2x.png" alt="icon of weather condition" height="50px">
                </td>
                <td style="vertical-align: middle">@data.Condition</td>
                <td style="vertical-align: middle">@data.Description</td>
            </tr>
        }
        </tbody>
    </table>
    
    
}

@code
{
    private List<WeatherModel> _historicalData ;
    private DateFilter _dateFilter = new DateFilter();
    private LineConfig configTemp;
    private LineConfig configHumidity;
    private LineConfig configPressure;
    private ChartJsLineChart _lineChartJs;


    private async Task DisplayHistoricalWeatherData()
    {
        _historicalData = await SqlQueries.GetHistoricalWeatherDataByDate(_dateFilter.FromDate);
        if (_historicalData != null && _historicalData.Count != 0)
        {
            await Charts.DisplayHistoricalTemperature(_historicalData, configTemp);
            await Charts.DisplayHistoricalHumidity(_historicalData, configTemp);
            await Charts.DisplayHistoricalPressure(_historicalData, configTemp);
        }
        
        
    }
}
