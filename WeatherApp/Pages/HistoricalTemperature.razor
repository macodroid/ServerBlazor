@page "/historicalTemperature"


@using WeatherApp.Data
@using WeatherApp.Common.Models
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@using WeatherDataAccessLibrary.Interfaces


@inject ISqlQueries SqlQueries

<style>
    div.line_chart{
        width: 1000px;
        margin: 0 auto;
    }
    div.dateInput{
        text-align: center;
    }
    table.table{
        width: 75% ;
        text-align: center;
        margin: 0 auto;
    }
    h2.daily{
        margin: 3% 0 3% 12%;
    }
</style>

<h1>Historické údaje o počasí v meste Bratislava</h1>

<EditForm Model="@_dateFilter"  OnValidSubmit="@DisplayHistoricalWeatherData">
    <div class="dateInput">
        <label>Dátum</label>
        <InputDate id="fromDate" @bind-Value="_dateFilter.FromDate" ></InputDate>
        <button type="submit" class="btn btn-success" style="margin-left: 15px">Zobraz</button>
    </div>
</EditForm>

@if (error != String.Empty)
{
    <h1>@error</h1>
}

@if (_historicalData == null)
{
    <p><em>Zvoľte dátum pre historické udaje</em></p>
}
else
{
    <h3>Historické údaje o počasí</h3>
    
    <div class="line_chart"> 
        <ChartJsLineChart @ref="_lineChartJs" Config="@configTemp" Width="50" Height="20" />
    </div>
    <div class="line_chart"> 
        <ChartJsLineChart @ref="_lineChartJs" Config="@configHumidity" Width="50" Height="20" />
    </div>
    <div class="line_chart"> 
        <ChartJsLineChart @ref="_lineChartJs" Config="@configPressure" Width="50" Height="20" />
    </div>
    
    <h2 class="daily">Daily observations</h2>
    
    <table class="table">
        <thead>
        <tr>
            <th>Čas</th>
            <th>Teplota</th>
            <th>Pocitová teplota</th>
            <th>Tlak</th>
            <th>Vlhkosť</th>
            <th>Ikona</th>
            <th>Podmienky</th>
            <th>Popis</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var data in _historicalData)
        {
            <tr>
                <td style="vertical-align: middle" >@data.Date.ToString("HH:mm")</td>
                <td style="vertical-align: middle">@Math.Ceiling(data.Temp)&deg</td>
                <td style="vertical-align: middle">@Math.Ceiling(data.Feels_Like)&deg</td>
                <td style="vertical-align: middle">@data.Pressure (mmHg)</td>
                <td style="vertical-align: middle">@data.Humidity%</td>
                <td style="vertical-align: middle">
                    <img src="http://openweathermap.org/img/wn/@data.Icon.Trim()@@2x.png" alt="icon of weather condition" height="50px">
                </td>       
                <td style="vertical-align: middle">@data.Condition</td>
                <td style="vertical-align: middle">@data.Description</td>
            </tr>
        }
        </tbody>
    </table>
}

@code
{
    private List<WeatherModel> _historicalData ;
    private DateFilter _dateFilter = new DateFilter();
    private LineConfig configTemp;
    private LineConfig configHumidity;
    private LineConfig configPressure;
    private ChartJsLineChart _lineChartJs;
    private string error = "";


    private async Task DisplayHistoricalWeatherData()
    {
        try
        {
            _historicalData = await SqlQueries.GetHistoricalWeatherDataByDate(_dateFilter.FromDate);
        }
        catch (Exception e)
        {
            error = "Neboli nájdené žiadne údaje";
            throw ;
        }
        
        if (_historicalData != null && _historicalData.Count != 0)
        {
            DisplayHistoricalTemperature(_historicalData);
            DisplayHistoricalHumidity(_historicalData);
            DisplayHistoricalPressure(_historicalData);
        }
    }
    
    private void DisplayHistoricalTemperature(List<WeatherModel> listWeatherModels)
    {
        listWeatherModels.RemoveAt(listWeatherModels.Count - 1);
        configTemp = new LineConfig()
        {
            Options = new LineOptions()
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = $"Historické údaje pre {listWeatherModels[0].Date.ToString("yyyy-MM-dd")} "
                },
                Legend = new Legend
                {
                    Display = true,
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Teplota",
                            }
                        },
                    },
                    xAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Hour,
                                Round = TimeMeasurement.Hour,
                                TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Čas"
                            }
                        }
                    }
                }
            }
        };

        var WeatherDataset = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
            Label = "Teplota",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 2,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.False,
            Hidden = false
        };

        var chartData = listWeatherModels.Select
            (_ => new TimeTuple<int>(new Moment(_.Date), System.Convert.ToInt32(Math.Ceiling(_.Temp))));
        WeatherDataset.AddRange(chartData);
        configTemp.Data.Datasets.Add(WeatherDataset);
    }
    
    private void DisplayHistoricalHumidity(List<WeatherModel> listWeatherModels)
    {
        listWeatherModels.RemoveAt(listWeatherModels.Count - 1);
        configHumidity = new LineConfig()
        {
            Options = new LineOptions()
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true
                },
                Legend = new Legend
                {
                    Display = true
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Vlhkosť [%]"
                            }
                        }
                    },
                    xAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Hour,
                                Round = TimeMeasurement.Hour,
                                TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Čas"
                            }
                        }
                    }
                }
            }
        };

        var WeatherDataset = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Blue),
            Label = "Vlhkosť",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 2,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.False,
            Hidden = false
        };

        var chartData = listWeatherModels.Select
            (_ => new TimeTuple<int>(new Moment(_.Date), System.Convert.ToInt32(Math.Ceiling(_.Humidity))));
        WeatherDataset.AddRange(chartData);
        configHumidity.Data.Datasets.Add(WeatherDataset);
    }

    private void DisplayHistoricalPressure(List<WeatherModel> listWeatherModels)
    {
        listWeatherModels.RemoveAt(listWeatherModels.Count - 1);
        configPressure = new LineConfig()
        {
            Options = new LineOptions()
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true
                },
                Legend = new Legend
                {
                    Display = true
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Tlak [mmHg]"
                            }
                        }
                    },
                    xAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Hour,
                                Round = TimeMeasurement.Hour,
                                TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Čas"
                            }
                        }
                    }
                }
            }
        };

        var WeatherDataset = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Blue),
            Label = "Tlak",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 2,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.False,
            Hidden = false
        };

        var chartData = listWeatherModels.Select
            (_ => new TimeTuple<int>(new Moment(_.Date), System.Convert.ToInt32(Math.Ceiling(_.Pressure))));
        WeatherDataset.AddRange(chartData);
        configPressure.Data.Datasets.Add(WeatherDataset);
    }
}
