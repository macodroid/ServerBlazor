@page "/historicalTemperature"


@using WeatherApp.Data
@using WeatherApp.Common.Models
@using Interfaces.WeatherDataAccessLibrary
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util


@inject ISqlQueries SqlQueries

<style>
    div.line_chart{
        width: 1000px;
        margin: 0 auto;
    }
    div.dateInput{
        text-align: center;
    }
</style>

<h1>Historical weather temperature in Bratislava</h1>

<h3>Get historical data between dates.</h3>
<EditForm Model="@_dateFilter"  OnValidSubmit="@DisplayHistoricalWeatherData">
    <div class="dateInput">
        <label>From date</label>
        <InputDate id="fromDate" @bind-Value="_dateFilter.FromDate" ></InputDate>
        <button type="submit" class="btn btn-success" style="margin-left: 15px">Display</button>
    </div>
   
    @* TODO: select with data to display*@
    
</EditForm>

@if (_historicalData == null)
{
    <p><em>Please select time period of historical data.</em></p>
}
else
{
    <h3>Historical Weather Data</h3>
    <div class="line_chart"> 
        <ChartJsLineChart @ref="_lineChartJs" Config="@_configTemp" Width="50" Height="20" />
    </div>
    <div class="line_chart"> 
        <ChartJsLineChart @ref="_lineChartJs" Config="@_configHumidity" Width="50" Height="20" />
    </div>
    <div class="line_chart"> 
        <ChartJsLineChart @ref="_lineChartJs" Config="@_configPressure" Width="50" Height="20" />
    </div>
    
    <h2>Daily observations</h2>
    
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temperature</th>
            <th>Feels like</th>
            <th>Pressure</th>
            <th>Humidity</th>
            <th>Icon</th>
            <th>Condition</th>
            <th>Description</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var data in _historicalData)
        {
            <tr>
                <td style="vertical-align: middle">@data.Date.ToString("HH:mm")</td>
                <td style="vertical-align: middle">@Math.Ceiling(data.Temp)&deg</td>
                @* <td style="vertical-align: middle">@Math.Ceiling(data.FeelsLike)&deg</td> *@
                <td style="vertical-align: middle">@data.Pressure (mmHg)</td>
                <td style="vertical-align: middle">@data.Humidity%</td>
                @* <td style="vertical-align: middle"> *@
                @*     <img src="http://openweathermap.org/img/wn/@data.Icon.Trim()@@2x.png" alt="icon of weather condition" height="50px"> *@
                @* </td> *@
                @* <td style="vertical-align: middle">@data.Condition</td> *@
                @* <td style="vertical-align: middle">@data.Description</td> *@
            </tr>
        }
        </tbody>
    </table>
    
    
}

@code
{
    private List<WeatherModel> _historicalData ;
    private DateFilter _dateFilter = new DateFilter();
    private LineConfig _configTemp;
    private LineConfig _configHumidity;
    private LineConfig _configPressure;
    private ChartJsLineChart _lineChartJs;
    private LineDataset<TimeTuple<int>> _WeatherDataset;


    private async Task DisplayHistoricalWeatherData()
    {
        _historicalData = await SqlQueries.GetHistoricalWeatherDataByDate(_dateFilter.FromDate);
        await DisplayHistoricalTemperature(_historicalData);
        await DisplayHistoricalHumidity(_historicalData);
        await DisplayHistoricalPressure(_historicalData);
    }
    
    private async Task DisplayHistoricalTemperature(List<WeatherModel> listWeatherModels)
    {
        listWeatherModels.RemoveAt(listWeatherModels.Count-1);
        _configTemp = new LineConfig()
         {
             Options = new LineOptions()
             {
                 Responsive = true,
                 Title = new OptionsTitle
                 {
                     Display = true,
                     Text = $"Historical Weather Data for {_dateFilter.FromDate.ToString("yyyy-MM-dd")} "
                 },
                 Legend = new Legend
                 {
                     Display = true
                 },
                 Tooltips = new Tooltips
                 {
                     Mode = InteractionMode.Nearest,
                     Intersect = false
                 },
                 Scales = new Scales
                 {
                     yAxes = new List<CartesianAxis>
                     {
                         new LinearCartesianAxis
                         {
                             ScaleLabel = new ScaleLabel
                             {
                                 LabelString = "Temperature "
                             }
                         }
                     },
                     xAxes = new List<CartesianAxis>
                     {
                         new TimeAxis
                         {
                             Distribution = TimeDistribution.Linear,
                             Ticks = new TimeTicks
                             {
                                 Source = TickSource.Data
                             },
                             Time = new TimeOptions
                             {
                                 Unit = TimeMeasurement.Hour,
                                 Round = TimeMeasurement.Hour,
                                 TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                 DisplayFormats = TimeDisplayFormats.DE_CH
                             },
                             ScaleLabel = new ScaleLabel
                             {
                                 LabelString = "Time"
                             }
                         }
                     }
                 }
             }
         };
        
        var _WeatherDataset= new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
            Label = "Temperature",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 2,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.False,
            Hidden = false
        };
        
        var chartData = listWeatherModels.Select
            (_ => new TimeTuple<int>(new Moment(_.Date), System.Convert.ToInt32(Math.Ceiling(_.Temp))));
        _WeatherDataset.AddRange(chartData);
        _configTemp.Data.Datasets.Add(_WeatherDataset);
    }
    
    private async Task DisplayHistoricalHumidity(List<WeatherModel> listWeatherModels)
    {
        listWeatherModels.RemoveAt(listWeatherModels.Count-1);
        _configHumidity = new LineConfig()
         {
             Options = new LineOptions()
             {
                 Responsive = true,
                 Title = new OptionsTitle
                 {
                     Display = true
                 },
                 Legend = new Legend
                 {
                     Display = true
                 },
                 Tooltips = new Tooltips
                 {
                     Mode = InteractionMode.Nearest,
                     Intersect = false
                 },
                 Scales = new Scales
                 {
                     yAxes = new List<CartesianAxis>
                     {
                         new LinearCartesianAxis
                         {
                             ScaleLabel = new ScaleLabel
                             {
                                 LabelString = "Humidity %"
                             }
                         }
                     },
                     xAxes = new List<CartesianAxis>
                     {
                         new TimeAxis
                         {
                             Distribution = TimeDistribution.Linear,
                             Ticks = new TimeTicks
                             {
                                 Source = TickSource.Data
                             },
                             Time = new TimeOptions
                             {
                                 Unit = TimeMeasurement.Hour,
                                 Round = TimeMeasurement.Hour,
                                 TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                 DisplayFormats = TimeDisplayFormats.DE_CH
                             },
                             ScaleLabel = new ScaleLabel
                             {
                                 LabelString = "Time"
                             }
                         }
                     }
                 }
             }
         };
        
        var _WeatherDataset= new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Blue),
            Label = "Humidity",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 2,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.False,
            Hidden = false
        };
        
        var chartData = listWeatherModels.Select
            (_ => new TimeTuple<int>(new Moment(_.Date), System.Convert.ToInt32(Math.Ceiling(_.Humidity))));
        _WeatherDataset.AddRange(chartData);
        _configHumidity.Data.Datasets.Add(_WeatherDataset);
    }
    
    private async Task DisplayHistoricalPressure(List<WeatherModel> listWeatherModels)
    {
        listWeatherModels.RemoveAt(listWeatherModels.Count-1);
        _configPressure = new LineConfig()
         {
             Options = new LineOptions()
             {
                 Responsive = true,
                 Title = new OptionsTitle
                 {
                     Display = true
                 },
                 Legend = new Legend
                 {
                     Display = true
                 },
                 Tooltips = new Tooltips
                 {
                     Mode = InteractionMode.Nearest,
                     Intersect = false
                 },
                 Scales = new Scales
                 {
                     yAxes = new List<CartesianAxis>
                     {
                         new LinearCartesianAxis
                         {
                             ScaleLabel = new ScaleLabel
                             {
                                 LabelString = "Pressure mmHg"
                             }
                         }
                     },
                     xAxes = new List<CartesianAxis>
                     {
                         new TimeAxis
                         {
                             Distribution = TimeDistribution.Linear,
                             Ticks = new TimeTicks
                             {
                                 Source = TickSource.Data
                             },
                             Time = new TimeOptions
                             {
                                 Unit = TimeMeasurement.Hour,
                                 Round = TimeMeasurement.Hour,
                                 TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                 DisplayFormats = TimeDisplayFormats.DE_CH
                             },
                             ScaleLabel = new ScaleLabel
                             {
                                 LabelString = "Time"
                             }
                         }
                     }
                 }
             }
         };
        
        var _WeatherDataset= new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Blue),
            Label = "Pressure",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 2,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.False,
            Hidden = false
        };
        
        var chartData = listWeatherModels.Select
            (_ => new TimeTuple<int>(new Moment(_.Date), System.Convert.ToInt32(Math.Ceiling(_.Pressure))));
        _WeatherDataset.AddRange(chartData);
        _configPressure.Data.Datasets.Add(_WeatherDataset);
    }
    
    
}
