@page "/"

@using Interfaces.WeatherDataAccessLibrary
@using WeatherApp.Common.Models

@inject ISqlDataAccess SqlDataAccess;
@inject ISqlQueries SqlQueries;


<h1>Weather Forecast for Bratislava</h1>
@if (_weatherData == null) 
{
    <h4>Loading...</h4>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temperature</th>
            <th>Feels like</th>
            <th>Pressure</th>
            <th>Humidity</th>
            <th>Icon</th>
            <th>Condition</th>
            <th>Description</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var data in _weatherData)
        {
            <tr>
                <td style="vertical-align: middle">@data.Date.ToString("HH:mm")</td>
                <td style="vertical-align: middle">@Math.Ceiling(data.Temp)&deg</td>
                <td style="vertical-align: middle">@Math.Ceiling(data.FeelsLike)&deg</td>
                <td style="vertical-align: middle">@data.Pressure (mmHg)</td>
                <td style="vertical-align: middle">@data.Humidity%</td>
                <td style="vertical-align: middle">
                    <img src="http://openweathermap.org/img/wn/@data.Icon.Trim()@@2x.png" alt="icon of weather condition" height="50px">
                </td>
                <td style="vertical-align: middle">@data.Condition</td>
                <td style="vertical-align: middle">@data.Description</td>
            </tr>
        }
        </tbody>
    </table>

}



@code
{

    private List<WeatherModel> _weatherData;

    protected override async Task OnInitializedAsync()
    {
        _weatherData = await SqlQueries.GetTodayWeather();
        SqlDataAccess.ReceiveNotify();
        SqlDataAccess.OnWeatherChange += SqlDataAccessOnOnWeatherChange;
    }

    private async void SqlDataAccessOnOnWeatherChange(object? sender, WeatherModel e)
    {
        _weatherData.Add(e);
        
        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }
}
