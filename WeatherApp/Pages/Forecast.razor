@page "/forecast"

@using WeatherApp.Common.Models
@using WeatherDataAccessLibrary.Interfaces


@inject ISqlDataAccess SqlDataAccess;
@inject ISqlQueries SqlQueries;
@inject IDatabaseNotifications DatabaseNotifications;

@if (_forecastData == null) 
{
    <h4>Loading...</h4>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temperature</th>
            <th>Actual</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var data in _forecastData)
        {
            <tr>
                <td style="vertical-align: middle">@data.Date.ToString("HH:mm")</td>
                <td style="vertical-align: middle">@data.Temp&deg</td>
                @data.Actual != 0 
                ? <td style="vertical-align: middle">@Math.Floor(data.Actual)&deg</td>
                : <td style="vertical-align: middle"></td>
            </tr>
        }
        </tbody>
    </table>
}

@code{

    List<ForecastResponseModel> _forecastData;
    List<double> actualTemperature;

    protected override async Task OnInitializedAsync()
    {
        _forecastData = await SqlQueries.GetTodayForecast();
        DatabaseNotifications.ReceiveNotifyCurrentWeather();
        DatabaseNotifications.OnForecastChange += SqlDataAccessOnForecastChange;
    }

    private async void SqlDataAccessOnForecastChange(object? sender, ForecastResponseModel e)
    {
        CheckIfSameDay(e.Date);
        
        if (e.Actual == 0.0)
        {
            _forecastData.Add(e);
        }
        else
        {
            actualTemperature = await SqlQueries.GetActualWeatherTemperature(e.Date);
            UpdateForecastList(_forecastData,actualTemperature[0],e.Date);
        }

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    private void UpdateForecastList(List<ForecastResponseModel> list ,double actual, DateTime date)
    {
        foreach (var item in list)
        {
            if (item.Date == date)
            {
                item.Actual = actual;
                SqlQueries.UpdatePredictedWeatherTemperature(item);
                break;
            }
        }
    }

    private void CheckIfSameDay(DateTime date)
    {
        var lastItem = _forecastData.LastOrDefault();
        if (lastItem != null && lastItem.Date.Day != date.Day)
        {
            _forecastData = new List<ForecastResponseModel>();
            actualTemperature = new List<double>();
        }
    }

}