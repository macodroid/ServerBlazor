@page "/forecast"

@using WeatherApp.Common.Models
@using WeatherDataAccessLibrary.Interfaces
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks


@inject ISqlDataAccess SqlDataAccess;
@inject ISqlQueries SqlQueries;
@inject IDatabaseNotifications DatabaseNotifications;

<style>
    div.line_chart{
        width: 1000px;
        margin: 0 auto;
    }
    table.table{
            width: 75% ;
            text-align: center;
            margin: 0 auto;
        }
</style>
<h3>Bratislava, Bratislava Region, Hodinové predpovede teploty</h3>

@if (_forecastData == null) 
{
    <h4>Načitávanie...</h4>
}
else
{
    <div class="line_chart"> 
        <ChartJsLineChart @ref="_lineChartJs" Config="@configTemp" Width="50" Height="20" />
    </div>
    <table class="table  table-striped">
        <thead>
        <tr>
            <th scope="col">Čas</th>
            <th scope="col">Teplota [&degC]</th>
        </tr>
        </thead>
        <tbody>
        
        @foreach (var data in _forecastData)
        {
            <tr>
                <td style="vertical-align: middle">@data.Date.ToString("HH:mm")</td>
                <td style="vertical-align: middle">@data.Temp</td>
            </tr>
        }
        </tbody>
    </table>
}

@code{

    List<ForecastResponseModel> _forecastData;
    private LineConfig configTemp;
    private ChartJsLineChart _lineChartJs;

    protected override async Task OnInitializedAsync()
    {
        //_forecastData = new List<ForecastResponseModel>();

        _forecastData = await SqlQueries.GetTodayForecast();

        _forecastData = _forecastData.OrderBy(x => x.Date).ToList();
        
        if (_forecastData != null && _forecastData.Count != 0)
        {
            DisplayPredictedTemperature(_forecastData);
        }
        DatabaseNotifications.ReceiveNotifyCurrentWeather();
        DatabaseNotifications.OnForecastChange += SqlDataAccessOnForecastChange;
    }

    private async void SqlDataAccessOnForecastChange(object? sender, ForecastResponseModel e)
    {
        CheckIfSameDay(e.Date);
        
        _forecastData.Add(e);
        await _lineChartJs.Update();
        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
        
    }
    
    private void CheckIfSameDay(DateTime date)
    {
        var lastItem = _forecastData.LastOrDefault();
        if (lastItem != null && lastItem.Date.Day != date.Day)
        {
            _forecastData = new List<ForecastResponseModel>();
        }
    }
    
    
    private void DisplayPredictedTemperature(List<ForecastResponseModel> listForecastModels)
    {
        configTemp = new LineConfig()
        {
            Options = new LineOptions()
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = $"Prepoveď teploty pre {listForecastModels[0].Date.ToString("yyyy-MM-dd")} "
                },
                Legend = new Legend
                {
                    Display = true
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    yAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Temperature "
                            }
                        },
                    },
                    xAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Hour,
                                Round = TimeMeasurement.Hour,
                                TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            }
                        }
                    }
                }
            }
        };

        var WeatherDataset = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
            Label = "Temperature",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 2,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.False,
            Hidden = false
        };

        var chartData = listForecastModels.Select
            (_ => new TimeTuple<int>(new Moment(_.Date), System.Convert.ToInt32(_.Temp)));
        WeatherDataset.AddRange(chartData);
        configTemp.Data.Datasets.Add(WeatherDataset);
    }
}