@page "/historicalWeather"


@using WeatherApp.Data
@using WeatherApp.Common.Models
@using Interfaces.WeatherDataAccessLibrary
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util


@inject ISqlQueries SqlQueries

<h1>Historical weather data in Bratislava</h1>

<h3>Get historical data between dates.</h3>
<EditForm Model="@_dateFilter"  OnValidSubmit="@DisplayHistoricalDataBetweenDates">
    <p>
        <label>From date</label>
        <InputDate id="fromDate" @bind-Value="_dateFilter.FromDate" >asdasdasdsad</InputDate>
    </p>
    <p>
        <label>To date</label>
        <InputDate id="toDate" @bind-Value="_dateFilter.ToDate"></InputDate>
    </p>
    
    <button type="submit">Display</button>
</EditForm>

@* @if (_historicalData == null) *@
@* { *@
@*     <p><em>Please select time period of historical data.</em></p> *@
@* } *@
@* else *@
@* { *@
@*     <table class="table"> *@
@*         <thead> *@
@*             <tr> *@
@*                 <th>Date</th> *@
@*                 <th>Time</th> *@
@*                 <th>Temp.(C)</th> *@
@*             </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*             @foreach (var data in _historicalData) *@
@*             { *@
@*                 <tr> *@
@*                     <td>@data.Date.ToString("yyyy-MM-dd")</td> *@
@*                     <td>@data.Local_Time</td> *@
@*                     <td>@data.Temp</td> *@
@*                 </tr> *@
@*             } *@
@*         </tbody> *@
@*     </table> *@
@* } *@

@if (_historicalData == null)
{
    <p><em>Please select time period of historical data.</em></p>
}
else
{
     <ChartJsLineChart @ref="_lineChartJs" Config="@_config" Width="600" Height="300" />
}

@code
{
    private List<Weather> _historicalData ;
    private DateFilter _dateFilter = new DateFilter();
    private LineConfig _config;
    private ChartJsLineChart _lineChartJs;
    private LineDataset<TimeTuple<double>> _WeatherDataset;

    // protected override async Task OnInitializedAsync()
    // {
    //     _historicalData = await SqlQueries.GetAllWeatherData();
    // }

    private async Task DisplayHistoricalDataBetweenDates()
    {
       _historicalData = await SqlQueries.GetWeatherDataByDates(_dateFilter.FromDate, _dateFilter.ToDate);
        _historicalData.RemoveAt(_historicalData.Count-1);
        _config = new LineConfig()
         {
             Options = new LineOptions()
             {
                 Responsive = true,
                 Title = new OptionsTitle
                 {
                     Display = true,
                     Text = $"Historical Weather Data from {_dateFilter.FromDate.ToString("yyyy-MM-dd")} to {_dateFilter.ToDate.ToString("yyyy-MM-dd")} "
                 },
                 Legend = new Legend
                 {
                     Display = false
                 },
                 Tooltips = new Tooltips
                 {
                     Mode = InteractionMode.Nearest,
                     Intersect = false
                 },
                 Scales = new Scales
                 {
                     yAxes = new List<CartesianAxis>
                     {
                         new LinearCartesianAxis
                         {
                             ScaleLabel = new ScaleLabel
                             {
                                 LabelString = "Weight"
                             }
                         }
                     },
                     xAxes = new List<CartesianAxis>
                     {
                         new TimeAxis
                         {
                             Distribution = TimeDistribution.Linear,
                             Ticks = new TimeTicks
                             {
                                 Source = TickSource.Data
                             },
                             Time = new TimeOptions
                             {
                                 Unit = TimeMeasurement.Hour,
                                 Round = TimeMeasurement.Minute,
                             },
                             ScaleLabel = new ScaleLabel
                             {
                                 LabelString = "Date"
                             }
                         }
                     }
                 }
             }
         };
        
        var _WeatherDataset= new LineDataset<TimeTuple<double>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
            Label = "tempertarure",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 2,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.False,
            Hidden = false
        };
        var chartData = _historicalData.Select(_ => new TimeTuple<double>(new Moment(_.Date), _.Temp));
        _WeatherDataset.AddRange(chartData);
        _config.Data.Datasets.Add(_WeatherDataset);
    }
}
