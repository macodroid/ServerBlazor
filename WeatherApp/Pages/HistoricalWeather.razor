@page "/historicalWeather"


@using WeatherApp.Data
@using WeatherApp.Common.Models
@using Interfaces.WeatherDataAccessLibrary
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util


@inject ISqlQueries SqlQueries

<h1>Historical weather data in Bratislava</h1>

<h3>Get historical data between dates.</h3>
<EditForm Model="@_dateFilter"  OnValidSubmit="@DisplayHistoricalDataBetweenDates">
    <div>
        <label>From date</label>
        <InputDate id="fromDate" @bind-Value="_dateFilter.FromDate" >asdasdasdsad</InputDate>
        <label style="margin-left: 10px">To date</label>
        <InputDate id="toDate" @bind-Value="_dateFilter.ToDate" ></InputDate>
    </div>
    @* TODO: select with data to display*@
    <button type="submit">Display</button>
</EditForm>

@if (_historicalData == null)
{
    <p><em>Please select time period of historical data.</em></p>
}
else
{
    <h3>Temperature</h3>
    <ChartJsLineChart @ref="_lineChartJs" Config="@_config" Width="600" Height="300" />
}

@code
{
    private List<WeatherModel> _historicalData ;
    private DateFilter _dateFilter = new DateFilter();
    private LineConfig _config;
    private ChartJsLineChart _lineChartJs;
    private LineDataset<TimeTuple<int>> _WeatherDataset;

    private async Task DisplayHistoricalDataBetweenDates()
    {
        _historicalData = await SqlQueries.GetWeatherDataByDates(_dateFilter.FromDate, _dateFilter.ToDate);
        _historicalData.RemoveAt(_historicalData.Count-1);
        _config = new LineConfig()
         {
             Options = new LineOptions()
             {
                 Responsive = true,
                 Title = new OptionsTitle
                 {
                     Display = true,
                     Text = $"Historical Weather Data from {_dateFilter.FromDate.ToString("yyyy-MM-dd")} to {_dateFilter.ToDate.ToString("yyyy-MM-dd")} "
                 },
                 Legend = new Legend
                 {
                     Display = false
                 },
                 Tooltips = new Tooltips
                 {
                     Mode = InteractionMode.Nearest,
                     Intersect = false
                 },
                 Scales = new Scales
                 {
                     yAxes = new List<CartesianAxis>
                     {
                         new LinearCartesianAxis
                         {
                             ScaleLabel = new ScaleLabel
                             {
                                 LabelString = "Temperature"
                             }
                         }
                     },
                     xAxes = new List<CartesianAxis>
                     {
                         new TimeAxis
                         {
                             Distribution = TimeDistribution.Linear,
                             Ticks = new TimeTicks
                             {
                                 Source = TickSource.Data
                             },
                             Time = new TimeOptions
                             {
                                 Unit = TimeMeasurement.Millisecond,
                                 Round = TimeMeasurement.Millisecond,
                                 TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                 DisplayFormats = TimeDisplayFormats.DE_CH
                             },
                             ScaleLabel = new ScaleLabel
                             {
                                 LabelString = "Time"
                             }
                         }
                     }
                 }
             }
         };
        
        var _WeatherDataset= new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
            Label = "tempertarure",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 2,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.False,
            Hidden = false
        };
        
        var chartData = _historicalData.Select
            (_ => new TimeTuple<int>(new Moment(_.Date), System.Convert.ToInt32(Math.Ceiling(_.Temp))));
        _WeatherDataset.AddRange(chartData);
        _config.Data.Datasets.Add(_WeatherDataset);
    }
}
