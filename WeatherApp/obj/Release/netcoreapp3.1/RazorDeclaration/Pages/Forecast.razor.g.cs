#pragma checksum "/home/maco/Documents/Project/ServerBlazor/WeatherApp/Pages/Forecast.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f42a324c5f59e622b1d0def597b7e1b6a1619101"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WeatherApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/home/maco/Documents/Project/ServerBlazor/WeatherApp/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/home/maco/Documents/Project/ServerBlazor/WeatherApp/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/home/maco/Documents/Project/ServerBlazor/WeatherApp/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/home/maco/Documents/Project/ServerBlazor/WeatherApp/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/home/maco/Documents/Project/ServerBlazor/WeatherApp/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/home/maco/Documents/Project/ServerBlazor/WeatherApp/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/home/maco/Documents/Project/ServerBlazor/WeatherApp/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/home/maco/Documents/Project/ServerBlazor/WeatherApp/_Imports.razor"
using WeatherApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/home/maco/Documents/Project/ServerBlazor/WeatherApp/_Imports.razor"
using WeatherApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "/home/maco/Documents/Project/ServerBlazor/WeatherApp/_Imports.razor"
using ChartJs.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/home/maco/Documents/Project/ServerBlazor/WeatherApp/Pages/Forecast.razor"
using WeatherApp.Common.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/home/maco/Documents/Project/ServerBlazor/WeatherApp/Pages/Forecast.razor"
using WeatherDataAccessLibrary.Interfaces;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/forecast")]
    public partial class Forecast : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 38 "/home/maco/Documents/Project/ServerBlazor/WeatherApp/Pages/Forecast.razor"
      

    List<ForecastResponseModel> _forecastData;
    List<double> actualTemperature;

    protected override async Task OnInitializedAsync()
    {
        _forecastData = await SqlQueries.GetTodayForecast();
        DatabaseNotifications.ReceiveNotifyCurrentWeather();
        DatabaseNotifications.OnForecastChange += SqlDataAccessOnForecastChange;
    }

    private async void SqlDataAccessOnForecastChange(object? sender, ForecastResponseModel e)
    {
        CheckIfSameDay(e.Date);
        
        if (e.Actual == 0.0)
        {
            _forecastData.Add(e);
        }
        else
        {
            actualTemperature = await SqlQueries.GetActualWeatherTemperature(e.Date);
            UpdateForecastList(_forecastData,actualTemperature[0],e.Date);
        }

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    private void UpdateForecastList(List<ForecastResponseModel> list ,double actual, DateTime date)
    {
        foreach (var item in list)
        {
            if (item.Date == date)
            {
                item.Actual = actual;
                SqlQueries.UpdatePredictedWeatherTemperature(item);
                break;
            }
        }
    }

    private void CheckIfSameDay(DateTime date)
    {
        var lastItem = _forecastData.LastOrDefault();
        if (lastItem != null && lastItem.Date.Day != date.Day)
        {
            _forecastData = new List<ForecastResponseModel>();
            actualTemperature = new List<double>();
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IDatabaseNotifications DatabaseNotifications { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISqlQueries SqlQueries { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISqlDataAccess SqlDataAccess { get; set; }
    }
}
#pragma warning restore 1591
